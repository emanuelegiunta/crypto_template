#!/bin/bash

# Initial alert message
echo "Installing Script:";
echo "Warning, this installing script is quite bad, non reversible, and may mess with other files in this folder. Before running it make sure only the repo files are in the current folder";
echo "";
echo "Insert project name:";
read prjname;
	
# Store the main project name. They all have the form $prjname_$function
main_name="main_"$prjname;
beamer_name="beamer_"$prjname;
settings_name="settings_"$prjname;
commands_name="commands_"$prjname;
metadata_name="metadata_"$prjname;
flags_name="flags_"$prjname;
bib_name="biblio_"$prjname;
	
echo "  changing files name";

# Hide unhidden files
mv gitignore .gitignore;

# Rename projects files
mv main.tex $main_name".tex";
mv beamer.tex $beamer_name".tex";
cd settings
	mv mysettings.tex $settings_name".tex";
	mv mycommands.tex $commands_name".tex";
	mv myflags.tex $flags_name".tex";
	mv mymetadata.tex $metadata_name".tex";
	mv mybibliography.bib $bib_name".bib";
cd ..


# Adjust references between renamed files
echo "  running sed to adjust inner references";
for file in *.tex sections/* settings/*
do
	sed -i "s/main/$main_name/g" $file;
	sed -i "s/mybeamer/$beamer_name/g" $file;
	sed -i "s/mysettings/$settings_name/g" $file;
	sed -i "s/mycommands/$commands_name/g" $file;
	sed -i "s/myflags/$flags_name/g" $file;
	sed -i "s/mymetadata/$metadata_name/g" $file;
	sed -i "s/mybibliography/$bib_name/g" $file;
done

# Leave the reset script (only used in debug)
echo "  Do you want to install in debug mode? [Yn]:";
read debug_flag;

if [ "$debug_flag" != "${debug_flag#[Yy]}" ];
then
	# Do nothing
	echo "  Debug mode: clear command available"
else
	# Remove the clear script
	echo "  Installation performed in non-debug mode"
	rm clear
fi

# Clone submodules
echo "  cloning submodules: Do you want to add Cryptobib? [Yn]:";
read cryptobib_flag;

if [ "$cryptobib_flag" != "${cryptobib_flag#[Yy]}" ];
then
	if git submodule status | grep -q cryptobib; 
	then
	    # Remove cryptobib and reinstall it
	    git rm --force cryptobib/
	fi

	# remove possibile traces left in the .git folder
	rm -rf .git/modules/cryptobib

	# If a cryptobib folder is still out there, remove it
	if [ -d  "./cryptobib" ];
	then
		rmdir cryptobib
	fi

	git submodule add https://github.com/cryptobib/export cryptobib
else
	# If cryptobib is not desired, remove any reference in tha main.tex
	sed -i "s/cryptobib\/abbrev3,cryptobib\/crypto,//g" $main_name".tex"
fi

rm install;
rm LICENSE;
rm README.md;

# Link to existing folder
#  NOTE: this HAS to be the last step, since we commit to changes done
echo "  Do you want to push into existing (empty) repository? [Yn]";
read push_flag;

if [ "$push_flag" != "${push_flag#[Yy]}" ];
then
	echo "  Enter repository url:"
	read remote_url;

	# Squash history and push it to the new repo
	git reset --soft 65dc3860a448685cf1455ebbae8d1e0171493456;
	git add .
	git commit --amend -m "Initial Commit";
	git remote set-url origin $remote_url;
	git push -u $remote_url;
fi

echo "done";